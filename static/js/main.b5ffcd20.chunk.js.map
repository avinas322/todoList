{"version":3,"sources":["components/TaskAdder.js","components/TaskList.js","App.js","reportWebVitals.js","index.js"],"names":["TaskAdder","task","taskTobeEdited","createTask","updateTaskList","className","onSubmit","e","type","placeholder","value","currentTask","required","onChange","target","taskId","TaskList","tasksList","deleteTask","editTask","length","map","disabled","onClick","App","emptyTask","taskStored","localStorage","getItem","initialTasksList","JSON","parse","useState","setTask","setTasksList","setTaskTobeEdited","useEffect","setItem","stringify","preventDefault","uuid","oriTask","id","filter","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5ffcd20.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TaskAdder = ({task, taskTobeEdited, createTask, updateTaskList}) =>{\r\n    return(\r\n        <form className='taskAdder' onSubmit={(e)=>updateTaskList(e)}>\r\n            <input type='text' placeholder='Enter a Task' value={task.currentTask} required\r\n            onChange={(e)=>createTask(e.target.value)} />\r\n            <input type='submit' value={taskTobeEdited.taskId === ''? 'Add Task':'Edit Task'} />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TaskAdder;","import React from 'react';\r\nimport {FaTrash} from \"react-icons/fa\";\r\nimport {FiEdit} from \"react-icons/fi\";\r\n\r\nconst TaskList = ({tasksList, taskTobeEdited, deleteTask, editTask}) =>{\r\n    return tasksList.length ? (\r\n            <ul>\r\n                {tasksList.map((task)=>{\r\n                    return (taskTobeEdited.taskId === '' ||  taskTobeEdited.taskId === task.taskId) ? (\r\n                        <li key={task.taskId}>\r\n                            {task.currentTask}\r\n                            <button className='editIcon icon' disabled={taskTobeEdited.taskId !== ''} onClick={()=>editTask(task.taskId)}>{<FiEdit />}</button>\r\n                            <button className='deleteIcon icon' disabled={taskTobeEdited.taskId !== ''} onClick={()=>deleteTask(task.taskId)}>{<FaTrash />}</button>\r\n                        </li>\r\n                    ) : (null)\r\n                })}\r\n            </ul>\r\n    ) : (\r\n        <div className='noTasks'>\r\n            <p>There are no tasks</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskList;","import React, {useState, useEffect} from 'react';\nimport TaskAdder from './components/TaskAdder';\nimport TaskList from './components/TaskList';\nimport uuid from 'uuid/dist/v1';\n\nfunction App() {\n  const emptyTask = {currentTask:'', taskId:''};\n  const taskStored = localStorage.getItem('tasks');\n  const initialTasksList = taskStored ? JSON.parse(taskStored) : [];\n\n  const [task, setTask] = useState(emptyTask);\n  const [tasksList, setTasksList] = useState(initialTasksList);\n  const [taskTobeEdited, setTaskTobeEdited] = useState(emptyTask);\n\n  const createTask = (value) =>{\n    setTask({\n      currentTask: value\n    })\n  }\n\n  const updateTaskList = (e) =>{\n    e.preventDefault();\n    if (taskTobeEdited.taskId === ''){\n      setTasksList([...tasksList, {currentTask: task.currentTask, taskId: uuid()}]);\n    } else {\n      setTasksList(tasksList.map((oriTask)=>{\n        return taskTobeEdited.taskId !== oriTask.taskId ? (oriTask) : ({...taskTobeEdited, ...task})\n      }));\n      setTaskTobeEdited(emptyTask);\n    }\n    setTask(emptyTask);\n  }\n\n  const deleteTask = (id) =>{\n    setTasksList(tasksList.filter((task)=> task.taskId !== id));\n  }\n\n  const editTask = (id) =>{\n    setTaskTobeEdited(tasksList.find((task)=> task.taskId === id));\n  }\n  useEffect(()=>{\n    setTask(taskTobeEdited);\n  },[taskTobeEdited]);\n\n  useEffect(()=>{\n    localStorage.setItem('tasks',JSON.stringify(tasksList))\n  },[tasksList]);\n  \n  return (\n    <div className=\"App\">\n      <header>\n        <h1 className='heading'>My ToDo List</h1>\n        <TaskAdder task={task} createTask={createTask} updateTaskList={updateTaskList} \n        taskTobeEdited={taskTobeEdited} />\n      </header>\n      <section className='taskLists'>\n        <TaskList tasksList={tasksList} taskTobeEdited={taskTobeEdited} deleteTask={deleteTask} editTask={editTask} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}